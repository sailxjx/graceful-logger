// Generated by CoffeeScript 1.7.1
(function() {
  var Logger, domain, logger, middleware, _callback, _uncaughtBounded;

  domain = require('domain');

  Logger = require('./logger');

  logger = new Logger();

  _callback = function(err) {
    logger.err(err.stack);
    if (process.domain != null) {
      process.domain.dispose();
    }
    return process.exit(1);
  };

  _uncaughtBounded = false;

  middleware = function(options) {
    var _middle;
    if (!_uncaughtBounded) {
      process.on('uncaughtException', _callback);
    }
    _uncaughtBounded = true;
    _middle = function(req, res, callback) {
      var dm;
      if (callback == null) {
        callback = function() {};
      }
      dm = domain.create();
      if (arguments.length === 1 && typeof arguments[0] === 'function') {
        callback = arguments[0];
      } else {
        dm.add(req);
        dm.add(res);
        res.on('close', function() {
          return dm.dispose();
        });
        res.on('finish', function() {
          return dm.dispose();
        });
      }
      dm.on('error', function(err) {
        dm.dispose();
        return _callback(err);
      });
      return dm.run(callback);
    };
    return _middle;
  };

  module.exports = middleware;

}).call(this);
