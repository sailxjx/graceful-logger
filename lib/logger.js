// Generated by CoffeeScript 1.7.1
(function() {
  var Logger, colors, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  util = require('util');

  colors = require('colors');

  Logger = (function() {
    var _formats;

    _formats = ['default', 'medium'];

    function Logger(format) {
      this.exit = __bind(this.exit, this);
      this.debug = __bind(this.debug, this);
      this.err = __bind(this.err, this);
      this.warn = __bind(this.warn, this);
      this.info = __bind(this.info, this);
      if (format != null) {
        this.format(format);
      } else {
        this._formatMethod = this._defaultFormat;
      }
    }

    Logger.prototype.format = function(format) {
      if ((format != null) && typeof format === 'string') {
        if (__indexOf.call(_formats, format) >= 0) {
          this._formatMethod = this["_" + format + "Format"];
        } else {
          this._format = format;
          this._formatMethod = this._customFormat;
        }
      } else {
        this._formatMethod = this._nullFormat;
      }
      return this;
    };

    Logger.prototype._defaultFormat = function() {
      this._format = 'color(:level:) :msg';
      return this._customFormat.apply(this, arguments);
    };

    Logger.prototype._nullFormat = function() {
      return false;
    };

    Logger.prototype._mediumFormat = function() {
      this._format = 'color([:level :date]) :msg';
      return this._customFormat.apply(this, arguments);
    };

    Logger.prototype._customFormat = function() {
      var matches, msg, raw;
      msg = util.format.apply(util, arguments);
      raw = this._format.replace(/\:level/g, this._level).replace(/\:date/g, new Date().toISOString()).replace(/\:msg/g, msg);
      if (matches = raw.match(/color\((.*?)\)/g)) {
        if (process.stdout.isTTY) {
          raw = raw.replace(/color\((.*?)\)/g, '$1'[this._color]);
        } else {
          raw = raw.replace(/color\((.*?)\)/g, '$1');
        }
      }
      return this._stream.write(raw + '\n');
    };

    Logger.prototype._log = function() {
      return this._formatMethod.apply(this, arguments);
    };

    Logger.prototype.info = function() {
      this._level = 'info';
      this._color = 'green';
      this._stream = process.stdout;
      return this._log.apply(this, arguments);
    };

    Logger.prototype.warn = function() {
      this._level = 'warn';
      this._color = 'yellow';
      this._stream = process.stderr;
      return this._log.apply(this, arguments);
    };

    Logger.prototype.err = function() {
      this._level = 'err!';
      this._color = 'red';
      this._stream = process.stderr;
      return this._log.apply(this, arguments);
    };

    Logger.prototype.debug = function() {
      if (!(this._debug || process.env.DEBUG)) {
        return false;
      }
      this._level = 'debug';
      this._color = 'cyan';
      this._stream = process.stdout;
      return this._log.apply(this, arguments);
    };

    Logger.prototype.exit = function(message, code) {
      if (code == null) {
        code = 1;
      }
      this._level = 'err!';
      this._color = 'red';
      this._stream = process.stderr;
      this._log.call(this, message);
      return process.exit(code);
    };

    Logger.prototype.mute = function() {
      this._formatMethod = this._nullFormat;
      return this;
    };

    Logger.prototype.error = Logger.prototype.err;

    return Logger;

  })();

  module.exports = Logger;

}).call(this);
