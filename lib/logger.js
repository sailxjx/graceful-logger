// Generated by CoffeeScript 1.6.3
(function() {
  var Logger, colors, middleware;

  colors = require('colors');

  middleware = require('./middleware');

  Logger = (function() {
    Logger.prototype.format = function() {
      var ft, i, matches, msgs, replaces, v;
      msgs = (function() {
        var _results;
        _results = [];
        for (i in arguments) {
          v = arguments[i];
          _results.push(v);
        }
        return _results;
      }).apply(this, arguments);
      if ((this.options.format != null) && typeof this.options.format === 'string') {
        matches = this.options.format.split(' ');
        replaces = {
          '%s': function(i) {
            i = Number(i);
            return matches = matches.slice(0, +(i - 1) + 1 || 9e9).concat(msgs, matches.slice(i + 1));
          },
          '%t': function(i) {
            return matches[i] = new Date;
          }
        };
        for (i in matches) {
          ft = matches[i];
          if (replaces[ft] != null) {
            replaces[ft].call(this, i);
          }
        }
        msgs = matches;
      }
      return msgs;
    };

    function Logger(options) {
      this.options = options != null ? options : {};
      this.prefix = {
        info: 'info:'.green,
        warn: 'WARN:'.yellow,
        err: 'ERR!:'.red
      };
    }

    Logger.prototype.info = function() {
      var args;
      if (!process.stdout.isTTY) {
        return console.log.apply(this, arguments);
      }
      args = this.format.apply(this, arguments);
      args.unshift(this.prefix.info);
      return console.log.apply(this, args);
    };

    Logger.prototype.warn = function() {
      var args;
      if (!process.stderr.isTTY) {
        return console.warn.apply(this, arguments);
      }
      args = this.format.apply(this, arguments);
      args.unshift(this.prefix.warn);
      return console.warn.apply(this, args);
    };

    Logger.prototype.err = function() {
      var args;
      if (!process.stderr.isTTY) {
        return console.error.apply(this, arguments);
      }
      args = this.format.apply(this, arguments);
      args.unshift(this.prefix.err);
      return console.error.apply(this, args);
    };

    return Logger;

  })();

  module.exports = Logger;

}).call(this);
