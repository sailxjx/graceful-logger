// Generated by CoffeeScript 1.6.3
(function() {
  var Logger, colors,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  colors = require('colors');

  Logger = (function() {
    Logger.prefix = {
      info: 'info:',
      warn: 'WARN:',
      err: 'ERR!:'
    };

    Logger.prototype.format = function(msg) {
      if (this.options.format != null) {
        return this.options.format.replace(/\%s/g, msg).replace(/\%t/g, "" + (new Date));
      }
      return msg;
    };

    function Logger(options) {
      this.options = options != null ? options : {};
      this._log = __bind(this._log, this);
    }

    Logger.prototype._log = function(str, prefix) {
      if (prefix == null) {
        prefix = '';
      }
      if (this.options['background']) {
        return this.background(str);
      }
      if (!this.options['quiet']) {
        console.log("" + prefix + str);
      }
      return this;
    };

    Logger.info = function() {
      var args, i, v;
      if (!process.stdout.isTTY) {
        return console.log.apply(this, arguments);
      }
      args = (function() {
        var _results;
        _results = [];
        for (i in arguments) {
          v = arguments[i];
          _results.push(v);
        }
        return _results;
      }).apply(this, arguments);
      args.unshift(Logger.prefix.info.green);
      return console.log.apply(this, args);
    };

    Logger.warn = function() {
      var args, i, v;
      if (!process.stderr.isTTY) {
        return console.warn.apply(this, arguments);
      }
      args = (function() {
        var _results;
        _results = [];
        for (i in arguments) {
          v = arguments[i];
          _results.push(v);
        }
        return _results;
      }).apply(this, arguments);
      args.unshift(Logger.prefix.warn.yellow);
      return console.warn.apply(this, args);
    };

    Logger.err = function() {
      var args, i, v;
      if (!process.stderr.isTTY) {
        return console.error.apply(this, arguments);
      }
      args = (function() {
        var _results;
        _results = [];
        for (i in arguments) {
          v = arguments[i];
          _results.push(v);
        }
        return _results;
      }).apply(this, arguments);
      args.unshift(Logger.prefix.err.red);
      return console.error.apply(this, args);
    };

    Logger.prototype.info = function() {
      var i, msg, str;
      msg = ((function() {
        var _results;
        _results = [];
        for (i in arguments) {
          str = arguments[i];
          _results.push(str);
        }
        return _results;
      }).apply(this, arguments)).join('');
      if (this.options.format != null) {
        msg = this.format(msg);
      }
      return Logger.info.apply(this, [msg]);
    };

    Logger.prototype.warn = function() {
      var i, msg, str;
      msg = ((function() {
        var _results;
        _results = [];
        for (i in arguments) {
          str = arguments[i];
          _results.push(str);
        }
        return _results;
      }).apply(this, arguments)).join('');
      if (this.options.format != null) {
        msg = this.format(msg);
      }
      return Logger.warn.apply(this, [msg]);
    };

    Logger.prototype.err = function() {
      var i, msg, str;
      msg = ((function() {
        var _results;
        _results = [];
        for (i in arguments) {
          str = arguments[i];
          _results.push(str);
        }
        return _results;
      }).apply(this, arguments)).join('');
      if (this.options.format != null) {
        msg = this.format(msg);
      }
      return Logger.err.apply(this, [msg]);
    };

    Logger.logger = function(options) {
      if (options == null) {
        options = {};
      }
      return new Logger(options);
    };

    return Logger;

  })();

  module.exports = Logger;

}).call(this);
