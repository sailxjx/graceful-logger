// Generated by CoffeeScript 1.9.0
(function() {
  var Logger, colors, formats, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  util = require('util');

  colors = require('colors');

  formats = require('./formats');

  Logger = (function() {
    function Logger(format, _at_options) {
      this.options = _at_options != null ? _at_options : {};
      this.exit = __bind(this.exit, this);
      this.debug = __bind(this.debug, this);
      this.err = __bind(this.err, this);
      this.warn = __bind(this.warn, this);
      this.info = __bind(this.info, this);
      if (typeof format === 'object') {
        this.options = format;
        format = this.options.format;
      }
      this.format(format);
      this.info.stream = process.stdout;
      this.err.stream = process.stderr;
      this.warn.stream = process.stderr;
      this.debug.stream = process.stdout;
      this.info.level = 'info';
      this.info.color = 'green';
      this.warn.level = 'warn';
      this.warn.color = 'yellow';
      this.err.level = 'err!';
      this.err.color = 'red';
      this.debug.level = 'debug';
      this.debug.color = 'cyan';
      this.error = this.err;
      this.warning = this.warn;
    }

    Logger.prototype.format = function(format) {
      if (typeof format === 'string') {
        this._format = formats[format] || format || formats["default"];
      } else {
        this._format || (this._format = formats["default"]);
      }
      return this;
    };

    Logger.prototype.setStream = function(method, stream) {
      var all, i, _method, _ref, _ref1;
      if (method == null) {
        method = 'info';
      }
      all = ['info', 'warn', 'err', 'debug'];
      if (method === 'all') {
        method = all;
      }
      if (method instanceof Array) {
        for (i in method) {
          _method = method[i];
          if ((_ref = this[_method]) != null) {
            _ref.stream = stream;
          }
        }
      } else if (typeof method === 'string') {
        if ((_ref1 = this[method]) != null) {
          _ref1.stream = stream;
        }
      }
      return this;
    };

    Logger.prototype.getStream = function(method) {
      var _ref;
      if (method == null) {
        method = 'info';
      }
      return (_ref = this[method]) != null ? _ref.stream : void 0;
    };

    Logger.prototype._log = function() {
      var msg, msgs, raw, _ref;
      if (!this._format) {
        return false;
      }
      if (((_ref = arguments[0]) != null ? _ref[0] : void 0) === '%') {
        msgs = [util.format.apply(util, arguments)];
      } else {
        msgs = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = arguments.length; _i < _len; _i++) {
            msg = arguments[_i];
            _results.push(msg);
          }
          return _results;
        }).apply(this, arguments)).map(function(msg) {
          return util.format.call(util, msg);
        });
      }
      msg = msgs.join(' ');
      raw = this._format.replace(/(\:[a-z0-9]+)(\.[a-z]+)?/ig, (function(_this) {
        return function(meet, code, color) {
          code = code.slice(1);
          if (/[0-9]+/.test(code)) {
            code = msgs[code] || '';
          } else {
            switch (code) {
              case 'level':
                code = _this._level;
                break;
              case 'date':
                code = new Date().toISOString();
                break;
              case 'msg':
                code = msg;
            }
          }
          if ((color != null) && _this._stream.isTTY) {
            color = color.slice(1);
            if (color === 'color') {
              color = _this._color;
            }
            code = code[color];
          }
          return code;
        };
      })(this));
      return this._stream.write(raw + '\n');
    };

    Logger.prototype.info = function() {
      this._level = this.info.level;
      this._color = this.info.color;
      this._stream = this.info.stream;
      return this._log.apply(this, arguments);
    };

    Logger.prototype.warn = function() {
      this._level = this.warn.level;
      this._color = this.warn.color;
      this._stream = this.warn.stream;
      return this._log.apply(this, arguments);
    };

    Logger.prototype.err = function() {
      this._level = this.err.level;
      this._color = this.err.color;
      this._stream = this.err.stream;
      return this._log.apply(this, arguments);
    };

    Logger.prototype.debug = function() {
      if (!(this.options.debug || process.env.DEBUG)) {
        return false;
      }
      this._level = this.debug.level;
      this._color = this.debug.color;
      this._stream = this.debug.stream;
      return this._log.apply(this, arguments);
    };

    Logger.prototype.exit = function(message, code) {
      if (code == null) {
        code = 1;
      }
      this.err(message);
      return process.exit(code);
    };

    Logger.prototype.mute = function() {
      this._format = formats.mute;
      return this;
    };

    return Logger;

  })();

  module.exports = Logger;

}).call(this);
