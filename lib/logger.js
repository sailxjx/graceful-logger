// Generated by CoffeeScript 1.6.3
(function() {
  var Logger, colors, middleware;

  colors = require('colors');

  middleware = require('./middleware');

  Logger = (function() {
    Logger.prototype.format = function(msg) {
      if (this.options.format != null) {
        return this.options.format.replace(/\%s/g, msg).replace(/\%t/g, "" + (new Date));
      }
      return msg;
    };

    function Logger(options) {
      this.options = options != null ? options : {};
      this.prefix = {
        info: 'info:',
        warn: 'WARN:',
        err: 'ERR!:'
      };
    }

    Logger.prototype.info = function() {
      var i, msg, str;
      if (!process.stdout.isTTY) {
        return console.log.apply(this, arguments);
      }
      msg = ((function() {
        var _results;
        _results = [];
        for (i in arguments) {
          str = arguments[i];
          _results.push(str);
        }
        return _results;
      }).apply(this, arguments)).join('');
      if (this.options.format != null) {
        msg = this.format(msg);
      }
      return console.log("" + this.prefix.info.green + " " + msg);
    };

    Logger.prototype.warn = function() {
      var i, msg, str;
      if (!process.stderr.isTTY) {
        return console.warn.apply(this, arguments);
      }
      msg = ((function() {
        var _results;
        _results = [];
        for (i in arguments) {
          str = arguments[i];
          _results.push(str);
        }
        return _results;
      }).apply(this, arguments)).join('');
      if (this.options.format != null) {
        msg = this.format(msg);
      }
      return console.warn("" + this.prefix.warn.yellow + " " + msg);
    };

    Logger.prototype.err = function() {
      var i, msg, str;
      if (!process.stderr.isTTY) {
        return console.error.apply(this, arguments);
      }
      msg = ((function() {
        var _results;
        _results = [];
        for (i in arguments) {
          str = arguments[i];
          _results.push(str);
        }
        return _results;
      }).apply(this, arguments)).join('');
      if (this.options.format != null) {
        msg = this.format(msg);
      }
      return console.error("" + this.prefix.err.red + " " + msg);
    };

    return Logger;

  })();

  module.exports = Logger;

}).call(this);
